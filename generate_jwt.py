#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
"""

import jwt
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å app/routes.py)
JWT_SECRET = "your-super-secret-jwt-key-change-in-production"
JWT_ALGORITHM = "HS256"

def generate_admin_token():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    payload = {
        'admin': True,
        'iat': datetime.utcnow(),
        'exp': datetime.utcnow() + timedelta(hours=24)  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
    }
    
    token = jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)
    return token

def decode_token(token):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        return "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
    except jwt.InvalidTokenError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"

if __name__ == "__main__":
    print("üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = generate_admin_token()
    print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
    print(f"üìã {token}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:")
    result = decode_token(token)
    if isinstance(result, dict):
        print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(result['iat'])}")
        print(f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromtimestamp(result['exp'])}")
    else:
        print(f"‚ùå {result}")
    
    print()
    print("üåê –ü–æ–ª–Ω—ã–π URL –¥–ª—è –∞–¥–º–∏–Ω–∫–∏:")
    print(f"üìé http://127.0.0.1:5000/{token}/admin")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ JWT_SECRET –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")